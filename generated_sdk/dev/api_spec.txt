##IMPORTANT: base_url:https://dev.to/api
---
##SECURITY SCHEMES
-api-key
desc: API Key authentication.

Authentication for some endpoints, like write operations on the
Articles API require a DEV API key.

All authenticated endpoints are CORS disabled, the API key is intended for non-browser scripts.

### Getting an API key

To obtain one, please follow these steps:

  - visit https://dev.to/settings/extensions
  - in the "DEV API Keys" section create a new key by adding a
    description and clicking on "Generate API Key"

    ![obtain a DEV API Key](https://user-images.githubusercontent.com/37842/172718105-bd93664e-76e0-477d-99c4-265dda0b06c5.png)

  - You'll see the newly generated key in the same view
    ![generated DEV API Key](https://user-images.githubusercontent.com/37842/172718151-e7fe26a0-9937-42e8-96c6-333acdab9e49.png)
type: apiKey
name: api-key
in: header
---
##SECURITY SCOPES
api-key: []
---
##ENDPOINTS
---
-method:post
path: /api/articles
opid: Articles_createNewArticle
sum: Publish article
ref: #/components/schemas/Article
---
-method:get
path: /api/articles
opid: Articles_listPublishedArticles
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
name: tag
in: query
req: False
schema
type: str
name: tags
in: query
req: False
schema
type: str
name: tags_exclude
in: query
req: False
schema
type: str
name: username
in: query
req: False
schema
type: str
name: state
in: query
req: False
schema
type: str
enum
fresh
rising
all
name: top
in: query
req: False
schema
type: int
format: int32
minimum: 1
name: collection_id
in: query
req: False
schema
type: int
format: int32
sum: Published articles
---
-method:get
path: /api/articles/latest
opid: Articles_listLatestPublished
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Published articles sorted by published date
---
-method:get
path: /api/articles/id
opid: Articles_getById
params
name: id
in: path
req: True
schema
type: int
sum: Published article by id
---
-method:put
path: /api/articles/id
opid: Articles_updateById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Update an article by id
ref: #/components/schemas/Article
---
-method:get
path: /api/articles/username/slug
opid: Articles_getByPath
params
name: username
in: path
req: True
schema
type: str
name: slug
in: path
req: True
schema
type: str
sum: Published article by path
---
-method:get
path: /api/articles/me
opid: Articles_getPublishedList
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Users articles
---
-method:get
path: /api/articles/me/published
opid: Articles_getPublishedList
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Users published articles
---
-method:get
path: /api/articles/me/unpublished
opid: Articles_getUnpublishedList
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Users unpublished articles
---
-method:get
path: /api/articles/me/all
opid: Articles_getAllUserArticles
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Users all articles
---
-method:put
path: /api/articles/id/unpublish
opid: Articles_unpublishById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
name: note
in: query
req: False
schema
type: str
sum: Unpublish an article
---
-method:get
path: /api/segments
opid: Segments_listAudienceSegments
params
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Manually managed audience segments
---
-method:post
path: /api/segments
opid: Segments_createManuallyManagedSegment
sum: Create a manually managed audience segment
---
-method:get
path: /api/segments/id
opid: Segments_getById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: A manually managed audience segment
---
-method:delete
path: /api/segments/id
opid: Segments_deleteManuallyManagedSegment
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Delete a manually managed audience segment
---
-method:get
path: /api/segments/id/users
opid: Segments_getUserListInSegment
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Users in a manually managed audience segment
---
-method:put
path: /api/segments/id/add_users
opid: Segments_addUsersToSegment
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Add users to a manually managed audience segment
ref: #/components/schemas/SegmentUserIds
---
-method:put
path: /api/segments/id/remove_users
opid: Segments_removeUsersFromSegment
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Remove users from a manually managed audience segment
ref: #/components/schemas/SegmentUserIds
---
-method:get
path: /api/billboards
opid: Billboards_getList
sum: Billboards
---
-method:post
path: /api/billboards
opid: Billboards_createNewBillboard
sum: Create a billboard
ref: #/components/schemas/BillboardsCreateNewBillboardRequest
---
-method:get
path: /api/billboards/id
opid: Billboards_getById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: A billboard by id
---
-method:put
path: /api/billboards/id
opid: Billboards_updateById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Update a billboard by ID
ref: #/components/schemas/BillboardsUpdateByIdRequest
---
-method:put
path: /api/billboards/id/unpublish
opid: Billboards_unpublishBillboard
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Unpublish a billboard
---
-method:get
path: /api/comments
opid: Comments_getAllThreaded
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
name: a_id
in: query
req: False
schema
type: str
name: p_id
in: query
req: False
schema
type: str
name: page
in: query
req: False
schema
type: str
sum: Comments
---
-method:get
path: /api/comments/id
opid: Comments_getThreadedComment
params
name: id
in: path
req: True
schema
type: int
sum: Comment by id
---
-method:get
path: /api/follows/tags
opid: Followedtags_getTagList
sum: Followed Tags
---
-method:get
path: /api/followers/users
opid: Followers_getList
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
name: sort
in: query
req: False
schema
type: str
sum: Followers
---
-method:get
path: /api/organizations/username
opid: Organizations_getByUsername
params
name: username
in: path
req: True
schema
type: str
sum: An organization by username
---
-method:get
path: /api/organizations/organization_id_or_username/users
opid: Organizations_listUsers
params
name: organization_id_or_username
in: path
req: True
schema
type: str
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Organizations users
---
-method:get
path: /api/organizations/organization_id_or_username/articles
opid: Organizations_listArticles
params
name: organization_id_or_username
in: path
req: True
schema
type: str
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Organizations Articles
---
-method:get
path: /api/organizations
opid: Organizations_listOfDev
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam10to1000
req: False
sum: Organizations
---
-method:post
path: /api/organizations
opid: Organizations_createNewOrganization
sum: Create an Organization
ref: #/components/schemas/Organization
---
-method:get
path: /api/organizations/id
opid: Organizations_getById
params
name: id
in: path
req: True
schema
type: int
sum: An organization by id
---
-method:put
path: /api/organizations/id
opid: Organizations_updateById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Update an organization by id
ref: #/components/schemas/Organization
---
-method:delete
path: /api/organizations/id
opid: Organizations_deleteById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Delete an Organization by id
---
-method:get
path: /api/pages
opid: Pages_listAllDetails
sum: show details for all pages
---
-method:post
path: /api/pages
opid: Pages_createNewPage
sum: pages
ref: #/components/schemas/PagesCreateNewPageRequest
---
-method:get
path: /api/pages/id
opid: Pages_getDetails
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: show details for a page
---
-method:put
path: /api/pages/id
opid: Pages_updatePageDetails
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: update details for a page
ref: #/components/schemas/Page
---
-method:delete
path: /api/pages/id
opid: Pages_removePageById
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: remove a page
---
-method:get
path: /api/podcast_episodes
opid: Podcastepisodes_listByDescendingPublicationDate
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
name: username
in: query
req: False
schema
type: str
sum: Podcast Episodes
---
-method:get
path: /api/profile_images/username
opid: ProfileImages_getByUsername
params
name: username
in: path
req: True
schema
type: str
sum: A Users or organizations profile image
---
-method:post
path: /api/reactions/toggle
opid: Reactions_toggleUserReaction
params
name: category
in: query
req: True
schema
type: str
enum
like
unicorn
exploding_head
raised_hands
fire
name: reactable_id
in: query
req: True
schema
type: int
format: int32
name: reactable_type
in: query
req: True
schema
type: str
enum
Comment
Article
User
sum: toggle reaction
---
-method:post
path: /api/reactions
opid: Reactions_createReaction
params
name: category
in: query
req: True
schema
type: str
enum
like
unicorn
exploding_head
raised_hands
fire
name: reactable_id
in: query
req: True
schema
type: int
format: int32
name: reactable_type
in: query
req: True
schema
type: str
enum
Comment
Article
User
sum: create reaction
---
-method:get
path: /api/readinglist
opid: Readinglist_getUserReadinglist
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam30to1000
req: False
sum: Readinglist
---
-method:get
path: /api/tags
opid: Tags_listByPopularity
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam10to1000
req: False
sum: Tags
---
-method:put
path: /api/users/id/suspend
opid: Users_suspendUser
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Suspend a User
---
-method:put
path: /api/users/id/limited
opid: Users_addLimitedRole
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Add limited role for a User
---
-method:delete
path: /api/users/id/limited
opid: Users_removeLimits
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Remove limited for a User
---
-method:put
path: /api/users/id/spam
opid: Users_assignSpamRole
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Add spam role for a User
---
-method:delete
path: /api/users/id/spam
opid: Users_removeSpamRole
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Remove spam role from a User
---
-method:put
path: /api/users/id/trusted
opid: Users_addTrustedRole
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Add trusted role for a User
---
-method:delete
path: /api/users/id/trusted
opid: Users_removeTrustedRole
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Remove trusted role from a User
---
-method:get
path: /api/users/me
opid: Users_getInformation
sum: The authenticated user
---
-method:get
path: /api/users/id
opid: Users_getByIdOrUsername
params
name: id
in: path
req: True
schema
type: str
sum: A User
---
-method:put
path: /api/users/id/unpublish
opid: Users_unpublishUserArticlesAndComments
params
name: id
in: path
req: True
schema
type: int
format: int32
minimum: 1
sum: Unpublish a Users Articles and Comments
---
-method:post
path: /api/admin/users
opid: Users_inviteUser
sum: Invite a User
ref: #/components/schemas/UserInviteParam
---
-method:get
path: /api/videos
opid: Videos_listByPopularity
params
ref: #/components/parameters/pageParam
req: False
ref: #/components/parameters/perPageParam24to1000
req: False
sum: Articles with a video
---
