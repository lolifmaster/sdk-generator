Here is a Python client SDK for the given API:

```python
import requests
from typing import Optional, List, Dict, Literal, TypedDict, Union

class WorkflowRequest(TypedDict):
    name: Optional[str]
    content: List[Dict]
    output_node: Optional[str]

class PatchedWorkflowRequest(TypedDict):
    name: Optional[str]
    content: List[Dict]
    output_node: Optional[str]

class ExecutionRequest(TypedDict):
    content: Dict

class Workflow:
    def __init__(self, base_url: str, auth_token: Optional[str] = None):
        self.base_url = base_url
        self.auth_token = auth_token

    def _make_request(self, method: Literal['GET', 'POST', 'PUT', 'PATCH', 'DELETE'], path: str, data: Optional[Dict] = None) -> requests.Response:
        url = self.base_url + path
        return requests.request(method, url, json=data)

    def _make_authenticated_request(self, method: Literal['GET', 'POST', 'PUT', 'PATCH', 'DELETE'], path: str, data: Optional[Dict] = None) -> requests.Response:
        url = self.base_url + path
        headers = {'Authorization': f'Bearer {self.auth_token}'} if self.auth_token else {}
        return requests.request(method, url, json=data, headers=headers)

    def workflow_list(self) -> requests.Response:
        return self._make_authenticated_request('GET', '/workflow/')

    def workflow_create(self, workflow_request: WorkflowRequest) -> requests.Response:
        return self._make_authenticated_request('POST', '/workflow/', workflow_request)

    def workflow_retrieve(self, workflow_id: str) -> requests.Response:
        return self._make_authenticated_request('GET', f'/workflow/{workflow_id}/')

    def workflow_update(self, workflow_id: str, workflow_request: WorkflowRequest) -> requests.Response:
        return self._make_authenticated_request('PUT', f'/workflow/{workflow_id}/', workflow_request)

    def workflow_partial_update(self, workflow_id: str, patched_workflow_request: PatchedWorkflowRequest) -> requests.Response:
        return self._make_authenticated_request('PATCH', f'/workflow/{workflow_id}/', patched_workflow_request)

    def workflow_destroy(self, workflow_id: str) -> requests.Response:
        return self._make_authenticated_request('DELETE', f'/workflow/{workflow_id}/')

    def workflow_execution_list(self, workflow_id: str) -> requests.Response:
        return self._make_authenticated_request('GET', f'/workflow/{workflow_id}/execution/')

    def workflow_execution_create(self, workflow_id: str, execution_request: ExecutionRequest) -> requests.Response:
        return self._make_authenticated_request('POST', f'/workflow/{workflow_id}/execution/', execution_request)

    def workflow_execution_retrieve(self, workflow_id: str, execution_id: str) -> requests.Response:
        return self._make_authenticated_request('GET', f'/workflow/{workflow_id}/execution/{execution_id}/')
```

This SDK provides a `Workflow` class with methods for each endpoint in the API. It uses the `requests` library to make the requests. The `_make_request` and `_make_authenticated_request` methods are used to make the requests, with the latter including an Authorization header if an auth token is provided. The methods for the endpoints take arguments corresponding to the parameters and request bodies described in the API, with nullable fields being optional. The return type of each method is a `requests.Response` object, which can be used to access the HTTP response status, headers, and body.